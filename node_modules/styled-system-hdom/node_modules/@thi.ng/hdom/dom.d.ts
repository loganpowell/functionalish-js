import { HDOMImplementation, HDOMOpts } from "./api";
/**
 * See `HDOMImplementation` interface for further details.
 *
 * @param opts
 * @param parent
 * @param tree
 * @param insert
 */
export declare const createTree: <T>(opts: Partial<HDOMOpts>, impl: HDOMImplementation<T>, parent: T, tree: any, insert?: number | undefined, init?: boolean) => any;
/**
 * See `HDOMImplementation` interface for further details.
 *
 * @param opts
 * @param parent
 * @param tree
 * @param index
 */
export declare const hydrateTree: <T>(opts: Partial<HDOMOpts>, impl: HDOMImplementation<any>, parent: T, tree: any, index?: number) => void;
/**
 * Creates a new DOM element of type `tag` with optional `attribs`. If
 * `parent` is not `null`, the new element will be inserted as child at
 * given `insert` index. If `insert` is missing, the element will be
 * appended to the `parent`'s list of children. Returns new DOM node.
 *
 * If `tag` is a known SVG element name, the new element will be created
 * with the proper SVG XML namespace.
 *
 * @param parent
 * @param tag
 * @param attribs
 * @param insert
 */
export declare const createElement: (parent: Element, tag: string, attribs?: any, insert?: number | undefined) => Node;
export declare const createTextElement: (parent: Element, content: string, insert?: number | undefined) => Node;
export declare const addChild: (parent: Element, child: Node, insert?: number | undefined) => Node;
export declare const getChild: (parent: Element, child: number) => Element;
export declare const replaceChild: (opts: Partial<HDOMOpts>, impl: HDOMImplementation<any>, parent: Element, child: number, tree: any, init?: boolean) => any;
export declare const cloneWithNewAttribs: (el: Element, attribs: any) => Element;
export declare const setContent: (el: Element, body: any) => any;
export declare const setAttribs: (el: Element, attribs: any) => Element;
/**
 * Sets a single attribute on given element. If attrib name is NOT an
 * event name (prefix: "on") and its value is a function, it is called
 * with given `attribs` object (usually the full attrib object passed to
 * `setAttribs`) and the function's return value is used as the actual
 * attrib value.
 *
 * Special rules apply for certain attributes:
 *
 * - "style": delegated to `setStyle()`
 * - "value": delegated to `updateValueAttrib()`
 * - attrib IDs starting with "on" are treated as event listeners
 *
 * If the given (or computed) attrib value is `false` or `undefined` the
 * attrib is removed from the element.
 *
 * @param el
 * @param id
 * @param val
 * @param attribs
 */
export declare const setAttrib: (el: Element, id: string, val: any, attribs?: any) => Element | undefined;
/**
 * Updates an element's `value` property. For form elements it too
 * ensures the edit cursor retains its position.
 *
 * @param el
 * @param v
 */
export declare const updateValueAttrib: (el: HTMLInputElement, v: any) => void;
export declare const removeAttribs: (el: Element, attribs: string[], prev: any) => void;
export declare const setStyle: (el: Element, styles: any) => Element;
/**
 * Adds event listener (possibly with options).
 *
 * @param el
 * @param id event name (w/o `on` prefix)
 * @param listener
 */
export declare const setListener: (el: Element, id: string, listener: EventListener | [EventListener, boolean | AddEventListenerOptions]) => void;
/**
 * Removes event listener (possibly with options).
 *
 * @param el
 * @param id event name (w/o `on` prefix)
 * @param listener
 */
export declare const removeListener: (el: Element, id: string, listener: EventListener | [EventListener, boolean | AddEventListenerOptions]) => void;
export declare const clearDOM: (el: Element) => string;
export declare const removeChild: (parent: Element, childIdx: number) => void;
