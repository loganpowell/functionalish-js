import { HDOMImplementation, HDOMOpts } from "./api";
/**
 * See `HDOMImplementation` interface for further details.
 *
 * @param opts
 * @param impl hdom implementation
 * @param parent
 * @param prev previous tree
 * @param curr current tree
 * @param child child index
 */
export declare const diffTree: <T>(opts: Partial<HDOMOpts>, impl: HDOMImplementation<T>, parent: T, prev: any[], curr: any[], child?: number) => any;
/**
 * Helper function for `diffTree()` to compute & apply the difference
 * between a node's `prev` and `curr` attributes.
 *
 * @param impl
 * @param el
 * @param prev
 * @param curr
 */
export declare const diffAttributes: <T>(impl: HDOMImplementation<T>, el: T, prev: any, curr: any) => void;
/**
 * Recursively attempts to call the `release` lifecycle method on every
 * element in given tree (branch), using depth-first descent. Each
 * element is checked for the presence of the `__release` control
 * attribute. If (and only if) it is set to `false`, further descent
 * into that element's branch is skipped.
 *
 * @param tag
 */
export declare const releaseTree: (tag: any) => void;
/**
 * Customized version @thi.ng/equiv which takes `__diff` attributes into
 * account (at any nesting level). If an hdom element's attribute object
 * contains `__diff: false`, the object will ALWAYS be considered
 * unequal, even if all other attributes in the object are equivalent.
 *
 * @param a
 * @param b
 */
export declare const equiv: (a: any, b: any) => boolean;
