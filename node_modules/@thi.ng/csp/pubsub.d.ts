import { Channel } from "./channel";
import { Mult } from "./mult";
import type { IObjectOf } from "@thi.ng/api";
import type { Transducer } from "@thi.ng/transducers";
import type { IWriteableChannel, TopicFn } from "./api";
export declare class PubSub<T> implements IWriteableChannel<T> {
    protected static NEXT_ID: number;
    protected src: Channel<T>;
    protected fn: TopicFn<T>;
    protected topics: IObjectOf<Mult<T>>;
    constructor(fn: TopicFn<T>);
    constructor(src: Channel<T>, fn: TopicFn<T>);
    get id(): string;
    set id(id: string);
    channel(): Channel<T>;
    write(val: any): Promise<boolean>;
    close(flush?: boolean): Promise<void> | undefined;
    /**
     * Creates a new topic subscription channel and returns it.
     * Each topic is managed by its own {@link Mult} and can have arbitrary
     * number of subscribers. If the optional transducer is given, it will
     * only be applied to the new subscription channel.
     *
     * The special "*" topic can be used to subscribe to all messages and
     * acts as multiplexed pass-through of the source channel.
     *
     * @param id - topic id
     * @param tx - transducer for new subscription
     */
    sub(id: string, tx?: Transducer<T, any>): Channel<any> | undefined;
    unsub(id: string, ch: Channel<T>): boolean;
    unsubAll(id: string, close?: boolean): boolean;
    protected process(): Promise<void>;
}
//# sourceMappingURL=pubsub.d.ts.map