import { DCons } from "@thi.ng/dcons";
export class FixedBuffer {
    constructor(limit = 1) {
        this.buf = new DCons();
        this.limit = limit;
    }
    get length() {
        return this.buf.length;
    }
    isEmpty() {
        return this.buf.length === 0;
    }
    isFull() {
        return this.buf.length >= this.limit;
    }
    release() {
        return this.buf.release();
    }
    push(x) {
        if (!this.isFull()) {
            this.buf.push(x);
            return true;
        }
        return false;
    }
    drop() {
        if (!this.isEmpty()) {
            return this.buf.drop();
        }
    }
}
export class DroppingBuffer extends FixedBuffer {
    constructor(limit = 1) {
        super(limit);
    }
    isFull() {
        return false;
    }
    push(x) {
        if (this.buf.length < this.limit) {
            this.buf.push(x);
        }
        return true;
    }
}
export class SlidingBuffer extends FixedBuffer {
    constructor(limit = 1) {
        super(limit);
    }
    isFull() {
        return false;
    }
    push(x) {
        if (this.buf.length >= this.limit) {
            this.buf.drop();
        }
        this.buf.push(x);
        return true;
    }
}
