import { DCons } from "@thi.ng/dcons";
import { Channel } from "./channel";
import type { Transducer } from "@thi.ng/transducers";
import type { IWriteableChannel } from "./api";
export declare class Mult<T> implements IWriteableChannel<T> {
    protected static nextID: number;
    protected src: Channel<any>;
    protected taps: DCons<Channel<any>>;
    protected tapID: number;
    constructor();
    constructor(id: string);
    constructor(src: Channel<T>);
    constructor(tx: Transducer<any, T>);
    constructor(id: string, tx: Transducer<any, T>);
    get id(): string;
    set id(id: string);
    channel(): Channel<any>;
    write(val: any): Promise<boolean>;
    close(flush?: boolean): Promise<void> | undefined;
    tap<R>(ch?: Channel<R> | Transducer<T, R>): Channel<R> | undefined;
    untap(ch: Channel<any>): boolean;
    untapAll(close?: boolean): boolean;
    protected process(): Promise<void>;
}
//# sourceMappingURL=mult.d.ts.map