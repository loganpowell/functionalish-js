var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { IWatchMixin } from "@thi.ng/api";
import { illegalState } from "@thi.ng/errors";
import { setIn, updateIn } from "@thi.ng/paths";
import { View } from "./view";
/**
 * Mutable wrapper for an (usually) immutable value. Support for
 * watches.
 */
let Atom = class Atom {
    constructor(val, valid) {
        if (valid && !valid(val)) {
            illegalState("initial state value did not validate");
        }
        this._value = val;
        this.valid = valid;
    }
    get value() {
        return this._value;
    }
    set value(val) {
        this.reset(val);
    }
    deref() {
        return this._value;
    }
    equiv(o) {
        return this === o;
    }
    reset(val) {
        const old = this._value;
        if (this.valid && !this.valid(val)) {
            return old;
        }
        this._value = val;
        this.notifyWatches(old, val);
        return val;
    }
    resetIn(path, val) {
        return this.reset(setIn(this._value, path, val));
    }
    swap(fn, ...args) {
        return this.reset(fn.apply(null, [this._value, ...args]));
    }
    swapIn(path, fn, ...args) {
        return this.reset(updateIn(this._value, path, fn, ...args));
    }
    /* istanbul ignore next */
    // @ts-ignore: mixin
    addWatch(id, fn) { }
    /* istanbul ignore next */
    // @ts-ignore: mixin
    removeWatch(id) { }
    // mixin stub
    /* istanbul ignore next */
    // @ts-ignore: mixin
    notifyWatches(old, prev) { }
    addView(path, tx, lazy = true) {
        return new View(this, path, tx, lazy);
    }
    release() {
        delete this._watches;
        delete this._value;
        return true;
    }
};
Atom = __decorate([
    IWatchMixin
], Atom);
export { Atom };
