import { toPath } from "./path";
import { updateInT } from "./update-in";
/**
 * Uses {@link updateIn} and returns updated state with key for given
 * path removed. Does not modify original state.Returns `undefined` if
 * `path` is an empty string or array.
 *
 * ```
 * deleteIn({ a: { b: { c: 23 } } }, "a.b.c");
 * // { a: { b: { } } }
 * ```
 *
 * @param state -
 * @param path -
 */
export const deleteIn = (state, path) => deleteInT(state, path);
export function deleteInT(state, path) {
    const ks = [...toPath(path)];
    if (ks.length > 0) {
        const k = ks.pop();
        return updateInT(state, ks, (x) => ((x = Object.assign({}, x)), delete x[k], x));
    }
}
