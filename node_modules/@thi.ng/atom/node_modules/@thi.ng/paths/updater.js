import { getterT } from "./getter";
import { setterT } from "./setter";
/**
 * Similar to {@link setter}, returns a function to update values at
 * given `path` using provided update `fn`.
 *
 * @remarks
 * The returned function accepts a single object / array and applies
 * `fn` to current path value (incl. any additional/optional arguments
 * passed) and uses result as new value. Does not modify original state
 * (unless given function does so itself).
 *
 * ```
 * add = updater("a.b", (x, n) => x + n);
 *
 * add({a: {b: 10}}, 13);
 * // { a: { b: 23 } }
 * ```
 *
 * @param path -
 * @param fn -
 */
export const updater = (path, fn) => updaterT(path, fn);
export function updaterT(path, fn) {
    const g = getterT(path);
    const s = setterT(path);
    return (state, ...args) => s(state, fn.apply(null, (args.unshift(g(state)), args)));
}
