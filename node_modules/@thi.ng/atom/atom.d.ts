import type { IEquiv, Path, Predicate, Watch } from "@thi.ng/api";
import type { IAtom, IView, SwapFn, ViewTransform } from "./api";
/**
 * Mutable wrapper for an (usually) immutable value. Support for
 * watches.
 */
export declare class Atom<T> implements IAtom<T>, IEquiv {
    protected _value: T;
    protected valid: Predicate<T> | undefined;
    protected _watches: any;
    constructor(val: T, valid?: Predicate<T>);
    get value(): T;
    set value(val: T);
    deref(): T;
    equiv(o: any): boolean;
    reset(val: T): T;
    resetIn<V>(path: Path, val: V): T;
    swap(fn: SwapFn<T>, ...args: any[]): T;
    swapIn<V>(path: Path, fn: SwapFn<V>, ...args: any[]): T;
    addWatch(id: string, fn: Watch<T>): boolean;
    removeWatch(id: string): boolean;
    notifyWatches(old: T, prev: T): void;
    addView<V>(path: Path, tx?: ViewTransform<V>, lazy?: boolean): IView<V>;
    release(): boolean;
}
//# sourceMappingURL=atom.d.ts.map