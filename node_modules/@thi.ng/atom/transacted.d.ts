import type { Path, Watch } from "@thi.ng/api";
import type { IAtom, IView, SwapFn, ViewTransform } from "./api";
export declare class Transacted<T> implements IAtom<T> {
    parent: IAtom<T>;
    current: T | undefined;
    protected id: string;
    protected isActive: boolean;
    protected _watches: any;
    constructor(parent: IAtom<T>);
    get value(): T;
    set value(val: T);
    get isTransaction(): boolean;
    deref(): T;
    equiv(o: any): boolean;
    reset(val: T): T;
    resetIn<V>(path: Path, val: V): T;
    swap(fn: SwapFn<T>, ...args: any[]): T;
    swapIn<V>(path: Path, fn: SwapFn<V>, ...args: any[]): T;
    begin(): void;
    commit(): NonNullable<T>;
    cancel(): void;
    addWatch(id: string, watch: Watch<T>): boolean;
    removeWatch(id: string): boolean;
    notifyWatches(old: T, curr: T): void;
    addView<V>(path: Path, tx?: ViewTransform<V>, lazy?: boolean): IView<V>;
    release(): boolean;
    protected ensureTx(): void;
}
//# sourceMappingURL=transacted.d.ts.map