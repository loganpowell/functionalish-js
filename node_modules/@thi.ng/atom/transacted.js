import { assert } from "@thi.ng/api";
import { setIn, updateIn } from "@thi.ng/paths";
import { nextID } from "./idgen";
import { View } from "./view";
export class Transacted {
    constructor(parent) {
        this.parent = parent;
        this.current = undefined;
        this.isActive = false;
        this.id = `tx${nextID()}-`;
    }
    get value() {
        return this.deref();
    }
    set value(val) {
        this.reset(val);
    }
    get isTransaction() {
        return this.isActive;
    }
    deref() {
        return this.isActive ? this.current : this.parent.deref();
    }
    equiv(o) {
        return this === o;
    }
    reset(val) {
        this.ensureTx();
        this.current = val;
        return val;
    }
    resetIn(path, val) {
        this.ensureTx();
        return this.reset(setIn(this.current, path, val));
    }
    swap(fn, ...args) {
        this.ensureTx();
        return this.reset(fn.apply(null, [this.current, ...args]));
    }
    swapIn(path, fn, ...args) {
        this.ensureTx();
        return this.reset(updateIn(this.current, path, fn, ...args));
    }
    begin() {
        assert(!this.isActive, "transaction already started");
        this.current = this.parent.deref();
        this.isActive = true;
    }
    commit() {
        this.ensureTx();
        const val = this.current;
        this.parent.reset(this.current);
        this.isActive = false;
        this.current = undefined;
        return val;
    }
    cancel() {
        this.ensureTx();
        this.isActive = false;
        this.current = undefined;
    }
    addWatch(id, watch) {
        return this.parent.addWatch(this.id + id, (_, prev, curr) => watch(id, prev, curr));
    }
    removeWatch(id) {
        return this.parent.removeWatch(this.id + id);
    }
    notifyWatches(old, curr) {
        this.parent.notifyWatches(old, curr);
    }
    addView(path, tx, lazy = true) {
        return new View(this, path, tx, lazy);
    }
    release() {
        delete this.parent;
        delete this.current;
        delete this.isActive;
        delete this._watches;
        return true;
    }
    ensureTx() {
        assert(this.isActive, "no active transaction");
    }
}
