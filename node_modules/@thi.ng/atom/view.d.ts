import type { Path } from "@thi.ng/api";
import type { IView, ReadonlyAtom, ViewTransform } from "./api";
/**
 * This class implements readonly access to a deeply nested value with
 * in an Atom/Cursor. An optional transformer function can be supplied
 * at creation time to produce a derived/materialized view of the actual
 * value held in the atom.
 *
 * @remarks
 * Views can be created directly or via the {@link IViewable.addView}
 * method of the parent state. Views can be
 * {@link @thi.ng/api#IDeref.deref}'d like atoms and polled for value
 * changes using {@link IView.changed}. The transformer is only applied
 * once per value change and its result cached until the next change.
 *
 * If the optional `lazy` is true (default), the transformer will only
 * be executed with the first {@link @thi.ng/api#IDeref.deref} after
 * each value change. If `lazy` is false, the transformer function will
 * be executed immediately after a value change occurred and so can be
 * used like a watch which only triggers if there was an actual value
 * change (in contrast to normal watches, which execute with each
 * update, regardless of value change).
 *
 * Related, the actual value change predicate can be customized. If not
 * given, the default {@link @thi.ng/equiv#equiv} will be used.
 *
 * @example
 * ```ts
 * a = new Atom({a: {b: 1}});
 * v = a.addView("a.b", (x) => x * 10);
 *
 * v.deref()
 * // 10
 *
 * // update atom state
 * a.swap((state) => setIn(state, "a.b", 2));
 * // {a: {b: 2}}
 *
 * v.changed()
 * // true
 * v.deref()
 * // 20
 *
 * v.release()
 * // remove view from parent state
 * ```
 */
export declare class View<T> implements IView<T> {
    readonly id: string;
    readonly parent: ReadonlyAtom<any>;
    readonly path: PropertyKey[];
    protected state: T | undefined;
    protected tx: ViewTransform<T>;
    protected unprocessed: any;
    protected isDirty: boolean;
    protected isLazy: boolean;
    constructor(parent: ReadonlyAtom<any>, path: Path, tx?: ViewTransform<T>, lazy?: boolean, equiv?: (a: any, b: any) => boolean);
    get value(): T | undefined;
    /**
     * Returns view's value. If the view has a transformer, the
     * transformed value is returned. The transformer is only run once
     * per value change.
     *
     * @remarks
     * See class comments about difference between lazy/eager behaviors.
     */
    deref(): T | undefined;
    /**
     * Returns true, if the view's value has changed since last
     * {@link @thi.ng/api#IDeref.deref}.
     */
    changed(): boolean;
    /**
     * Like {@link @thi.ng/api#IDeref.deref}, but doesn't update view's
     * cached state and dirty flag if value has changed.
     *
     * @remarks
     * If there's an unprocessed value change, returns result of this
     * sub's transformer or else the cached value.
     *
     * **Important:** Use this function only if the view has none or or
     * a stateless transformer. Else might cause undefined/inconsistent
     * behavior when calling `view` or {@link @thi.ng/api#IDeref.deref}
     * subsequently.
     */
    view(): T | undefined;
    /**
     * Disconnects this view from parent state, marks itself
     * dirty/changed and sets its unprocessed raw value to `undefined`.
     */
    release(): boolean;
}
//# sourceMappingURL=view.d.ts.map