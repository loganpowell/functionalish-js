import type { Fn3, Pair } from "@thi.ng/api";
import type { EquivSetOpts, IEquivSet } from "./api";
/**
 * An alternative set implementation to the native ES6 Set type. Uses
 * customizable equality/equivalence predicate and so is more useful
 * when dealing with structured data. Implements full API of native Set
 * and by the default uses {@link @thi.ng/equiv#equiv} for equivalence
 * checking.
 *
 * Additionally, the type also implements the {@link @thi.ng/api#ICopy}, {@link @thi.ng/api#IEmpty} and
 * {@link @thi.ng/api#IEquiv} interfaces itself.
 */
export declare class ArraySet<T> extends Set<T> implements IEquivSet<T> {
    constructor(vals?: Iterable<T> | null, opts?: Partial<EquivSetOpts<T>>);
    [Symbol.iterator](): IterableIterator<T>;
    get [Symbol.species](): typeof ArraySet;
    get [Symbol.toStringTag](): string;
    get size(): number;
    copy(): ArraySet<T>;
    empty(): ArraySet<T>;
    clear(): void;
    first(): T | undefined;
    add(key: T): this;
    into(keys: Iterable<T>): this;
    has(key: T): boolean;
    /**
     * Returns the canonical value for `x`, if present. If the set
     * contains no equivalent for `x`, returns `notFound`.
     *
     * @param key - search key
     * @param notFound - default value
     */
    get(key: T, notFound?: T): T | undefined;
    delete(key: T): boolean;
    disj(keys: Iterable<T>): this;
    equiv(o: any): boolean;
    forEach(fn: Fn3<Readonly<T>, Readonly<T>, Set<T>, void>, thisArg?: any): void;
    entries(): IterableIterator<Pair<T, T>>;
    keys(): IterableIterator<T>;
    values(): IterableIterator<T>;
    opts(): EquivSetOpts<T>;
}
//# sourceMappingURL=array-set.d.ts.map