import { SEMAPHORE } from "@thi.ng/api";
import { equiv } from "@thi.ng/equiv";
import { dissoc } from "./dissoc";
import { equivSet } from "./internal/equiv";
import { into } from "./into";
const __private = new WeakMap();
const __vals = (inst) => __private.get(inst).vals;
/**
 * An alternative set implementation to the native ES6 Set type. Uses
 * customizable equality/equivalence predicate and so is more useful
 * when dealing with structured data. Implements full API of native Set
 * and by the default uses {@link @thi.ng/equiv#equiv} for equivalence
 * checking.
 *
 * Additionally, the type also implements the {@link @thi.ng/api#ICopy}, {@link @thi.ng/api#IEmpty} and
 * {@link @thi.ng/api#IEquiv} interfaces itself.
 */
export class ArraySet extends Set {
    constructor(vals, opts = {}) {
        super();
        __private.set(this, { equiv: opts.equiv || equiv, vals: [] });
        vals && this.into(vals);
    }
    *[Symbol.iterator]() {
        yield* __vals(this);
    }
    get [Symbol.species]() {
        return ArraySet;
    }
    get [Symbol.toStringTag]() {
        return "ArraySet";
    }
    get size() {
        return __vals(this).length;
    }
    copy() {
        const $this = __private.get(this);
        const s = new ArraySet(null, { equiv: $this.equiv });
        __private.get(s).vals = $this.vals.slice();
        return s;
    }
    empty() {
        return new ArraySet(null, this.opts());
    }
    clear() {
        __vals(this).length = 0;
    }
    first() {
        if (this.size) {
            return __vals(this)[0];
        }
    }
    add(key) {
        !this.has(key) && __vals(this).push(key);
        return this;
    }
    into(keys) {
        return into(this, keys);
    }
    has(key) {
        return this.get(key, SEMAPHORE) !== SEMAPHORE;
    }
    /**
     * Returns the canonical value for `x`, if present. If the set
     * contains no equivalent for `x`, returns `notFound`.
     *
     * @param key - search key
     * @param notFound - default value
     */
    get(key, notFound) {
        const $this = __private.get(this);
        const eq = $this.equiv;
        const vals = $this.vals;
        for (let i = vals.length; --i >= 0;) {
            if (eq(vals[i], key)) {
                return vals[i];
            }
        }
        return notFound;
    }
    delete(key) {
        const $this = __private.get(this);
        const eq = $this.equiv;
        const vals = $this.vals;
        for (let i = vals.length; --i >= 0;) {
            if (eq(vals[i], key)) {
                vals.splice(i, 1);
                return true;
            }
        }
        return false;
    }
    disj(keys) {
        return dissoc(this, keys);
    }
    equiv(o) {
        return equivSet(this, o);
    }
    forEach(fn, thisArg) {
        const vals = __vals(this);
        for (let i = vals.length; --i >= 0;) {
            const v = vals[i];
            fn.call(thisArg, v, v, this);
        }
    }
    *entries() {
        for (let v of __vals(this)) {
            yield [v, v];
        }
    }
    *keys() {
        yield* __vals(this);
    }
    *values() {
        yield* __vals(this);
    }
    opts() {
        return { equiv: __private.get(this).equiv };
    }
}
