/**
 * Like {@link commonKeysObj}, but for ES6 Maps.
 *
 * @param a - first map
 * @param b - other map
 * @param out - result array
 */
export declare const commonKeysMap: <K>(a: Map<K, any>, b: Map<K, any>, out?: K[]) => K[];
/**
 * Returns array of keys present in both args, i.e. the set intersection
 * of the given objects' key / property sets.
 *
 * @example
 * ```ts
 * commonKeys({ a: 1, b: 2 }, { c: 10, b: 20, a: 30 })
 * // [ "a", "b" ]
 * ```
 *
 * @param a - first object
 * @param b - other object
 * @param out - result array
 */
export declare const commonKeysObj: <A extends any, B extends any>(a: A, b: B, out?: string[]) => (keyof A & keyof B)[];
//# sourceMappingURL=common-keys.d.ts.map