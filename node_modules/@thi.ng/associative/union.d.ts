import type { Reducer } from "@thi.ng/transducers";
/**
 * Computes union of sets `a` and `b` and writes results to new set or
 * optionally given set `out` (assumed to be empty for correct results).
 *
 * @param a - first set
 * @param b - other set
 * @param out - result set
 */
export declare const union: <T>(a: Set<T>, b: Set<T>, out?: Set<T> | undefined) => Set<T>;
/**
 * Reducer version of {@link union}. If `src` is given returns the reduced
 * union of given inputs, else merely returns a reducer to be used with
 * {@link @thi.ng/transducers#(reduce:1)} /
 * {@link @thi.ng/transducers#(transduce:1)} functions.
 *
 * @param src - input collections
 */
export declare function unionR<T>(): Reducer<Set<T>, Iterable<T>>;
export declare function unionR<T>(src: Iterable<T>): Set<T>;
//# sourceMappingURL=union.d.ts.map