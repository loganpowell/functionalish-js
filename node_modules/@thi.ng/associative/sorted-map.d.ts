import type { Fn3, IObjectOf, Pair } from "@thi.ng/api";
import type { ReductionFn } from "@thi.ng/transducers";
import type { SortedMapOpts } from "./api";
declare class Node<K, V> {
    k: K | null;
    v: V | null;
    next: Node<K, V>[];
    constructor(k: K | null, v: V | null, h: number);
}
export declare class SortedMap<K, V> extends Map<K, V> {
    /**
     * Creates new {@link SortedMap} instance from given object's key-value
     * pairs.
     *
     * @param obj - source object
     * @param opts - config options
     */
    static fromObject<T>(obj: IObjectOf<T>, opts?: Partial<SortedMapOpts<string>>): SortedMap<string, T>;
    static DEFAULT_CAP: number;
    static DEFAULT_P: number;
    /**
     * Creates new {@link SortedMap} instance with optionally given pairs
     * and/or options.
     *
     * @param pairs - key-value pairs
     * @param opts - config options
     */
    constructor(pairs?: Iterable<Pair<K, V>> | null, opts?: Partial<SortedMapOpts<K>>);
    get [Symbol.species](): typeof SortedMap;
    [Symbol.iterator](): IterableIterator<Pair<K, V>>;
    entries(key?: K, max?: boolean): IterableIterator<Pair<K, V>>;
    keys(key?: K, max?: boolean): IterableIterator<K>;
    values(key?: K, max?: boolean): IterableIterator<V>;
    get size(): number;
    clear(): void;
    empty(): SortedMap<K, V>;
    copy(): SortedMap<K, V>;
    compare(o: Map<K, V>): number;
    equiv(o: any): boolean;
    first(): Pair<K, V> | undefined;
    get(k: K, notFound?: V): V | undefined;
    has(key: K): boolean;
    set(k: K, v: V): this;
    delete(k: K): boolean;
    into(pairs: Iterable<Pair<K, V>>): this;
    dissoc(keys: Iterable<K>): this;
    forEach(fn: Fn3<V, Readonly<K>, Map<K, V>, void>, thisArg?: any): void;
    $reduce(rfn: ReductionFn<any, Pair<K, V>>, acc: any): any;
    opts(): SortedMapOpts<K>;
    protected findPredNode(k: K): Node<any, any>;
    protected pickHeight(maxh: number, h: number, p: number): number;
}
export {};
//# sourceMappingURL=sorted-map.d.ts.map