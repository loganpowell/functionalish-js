/**
 * Renames keys in `src` using mapping provided by key map `km`. Does
 * support key swapping / swizzling. Does not modify original.
 *
 * @param src - source map
 * @param km - key mappings
 * @param out - result map
 */
export declare const renameKeysMap: <K, V>(src: Map<K, V>, km: Map<K, K>, out?: Map<K, V> | undefined) => Map<K, V> | undefined;
/**
 * Renames keys in `src` using mapping provided by key map `km`. Does
 * support key swapping / swizzling. Does not modify original.
 *
 * ```
 * // swap a & b, rename c
 * renameKeysObj({a: 1, b: 2, c: 3}, {a: "b", b: "a", c: "cc"})
 * // {b: 1, a: 2, cc: 3}
 * ```
 *
 * @param src - source object
 * @param km - key mappings
 * @param out - result object
 */
export declare const renameKeysObj: <T>(src: T, km: { [id in keyof T]?: string | number | symbol | undefined; }, out?: any) => any;
//# sourceMappingURL=rename-keys.d.ts.map