import type { IObjectOf } from "@thi.ng/api";
/**
 * Returns a new map in which the original values are used as keys and
 * original keys as values. If `dest` is given, writes results in that
 * map instead. Depending on the value type of `src` and/or if the
 * inverted map should use custom key equality semantics as provided by
 * the Map types in this package, you MUST provide a `dest` map, since
 * the default `dest` will only be a standard ES6 Map.
 *
 * @example
 * ```ts
 * invertMap(new Map(), new Map([["a", 1], ["b", 2]]));
 * // Map { 1 => 'a', 2 => 'b' }
 * ```
 *
 * @param src - map to invert
 * @param dest - result map
 */
export declare const invertMap: <K, V>(src: Map<K, V>, dest?: Map<V, K> | undefined) => Map<V, K>;
/**
 * Returns a new object in which the original values are used as keys
 * and original keys as values. If `dest` is given, writes results in
 * that object instead.
 *
 * @example
 * ```ts
 * invertObj({a: 1, b: 2})
 * // { '1': 'a', '2': 'b' }
 * ```
 *
 * @param src - object to invert
 * @param dest - result object
 */
export declare const invertObj: (src: IObjectOf<string | number | symbol>, dest?: IObjectOf<string | number | symbol>) => IObjectOf<string | number | symbol>;
//# sourceMappingURL=invert.d.ts.map