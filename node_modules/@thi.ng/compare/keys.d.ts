/**
 * HOF comparator. Returns new comparator to sort objects by given `key`
 * and with optional comparator `cmp` (default: {@link compare}).
 *
 * @param key -
 * @param cmp -
 */
export declare const compareByKey: <T, K extends keyof T>(key: K, cmp?: import("@thi.ng/api").Fn2<T[K], T[K], number>) => import("@thi.ng/api").Fn2<T, T, number>;
/**
 * HOF comparator. Returns new comparator to sort objects by given keys
 * `a` (major), `b` (minor) and with optional comparators (default for
 * each: {@link compare}).
 *
 * @param a -
 * @param b -
 * @param cmpA -
 * @param cmpB -
 */
export declare const compareByKeys2: <T, A extends keyof T, B extends keyof T>(a: A, b: B, cmpA?: import("@thi.ng/api").Fn2<T[A], T[A], number>, cmpB?: import("@thi.ng/api").Fn2<T[B], T[B], number>) => import("@thi.ng/api").Fn2<T, T, number>;
/**
 * Same as {@link compareByKeys2}, but for 3 sort keys / comparators.
 *
 * @param a -
 * @param b -
 * @param c -
 * @param cmpA -
 * @param cmpB -
 * @param cmpC -
 */
export declare const compareByKeys3: <T, A extends keyof T, B extends keyof T, C extends keyof T>(a: A, b: B, c: C, cmpA?: import("@thi.ng/api").Fn2<T[A], T[A], number>, cmpB?: import("@thi.ng/api").Fn2<T[B], T[B], number>, cmpC?: import("@thi.ng/api").Fn2<T[C], T[C], number>) => import("@thi.ng/api").Fn2<T, T, number>;
/**
 * Same as {@link compareByKeys2}, but for 4 sort keys / comparators.
 *
 * @param a -
 * @param b -
 * @param c -
 * @param d -
 * @param cmpA -
 * @param cmpB -
 * @param cmpC -
 * @param cmpD -
 */
export declare const compareByKeys4: <T, A extends keyof T, B extends keyof T, C extends keyof T, D extends keyof T>(a: A, b: B, c: C, d: D, cmpA?: import("@thi.ng/api").Fn2<T[A], T[A], number>, cmpB?: import("@thi.ng/api").Fn2<T[B], T[B], number>, cmpC?: import("@thi.ng/api").Fn2<T[C], T[C], number>, cmpD?: import("@thi.ng/api").Fn2<T[D], T[D], number>) => import("@thi.ng/api").Fn2<T, T, number>;
//# sourceMappingURL=keys.d.ts.map