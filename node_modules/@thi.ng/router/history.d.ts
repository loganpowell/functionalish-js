import { BasicRouter } from "./basic";
import type { Fn } from "@thi.ng/api";
import type { HTMLRouterConfig, RouteMatch } from "./api";
export declare class HTMLRouter extends BasicRouter {
    protected currentPath: string;
    protected popHandler: Fn<PopStateEvent, void>;
    protected hashHandler: Fn<HashChangeEvent, void>;
    protected useFragment: boolean;
    protected ignoreHashChange: boolean;
    constructor(config: HTMLRouterConfig);
    start(): void;
    release(): void;
    /**
     * Like `BasicRouter.route()`, but takes additional arg to control
     * if this routing operation should manipulate the browser's `history`.
     * If called from userland, this normally is true. However, we want
     * to avoid this if called from this router's own event handlers.
     *
     * @param raw -
     * @param pushState -
     */
    route(src: string, pushState?: boolean): RouteMatch | undefined;
    routeTo(route: string): void;
    format(id: PropertyKey, params?: any): string;
    format(match: Partial<RouteMatch>): string;
    protected handlePopChange(): Fn<PopStateEvent, void>;
    protected handleHashChange(): Fn<HashChangeEvent, void>;
    protected handleRouteFailure(): boolean;
}
//# sourceMappingURL=history.d.ts.map