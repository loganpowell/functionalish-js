import type { Event, INotify, IObjectOf, Listener } from "@thi.ng/api";
import type { Route, RouteMatch, RouteParamValidator, RouterConfig } from "./api";
export declare class BasicRouter implements INotify {
    config: RouterConfig;
    current: RouteMatch | undefined;
    constructor(config: RouterConfig);
    /** {@inheritDoc @thi.ng/api#INotify.addListener} */
    addListener(id: string, fn: Listener, scope?: any): boolean;
    /** {@inheritDoc @thi.ng/api#INotify.removeListener} */
    removeListener(id: string, fn: Listener, scope?: any): boolean;
    /** {@inheritDoc @thi.ng/api#INotify.notify} */
    notify(event: Event): void;
    start(): void;
    /**
     * Main router function. Attempts to match given input string
     * against all configured routes. If none matches, falls back
     * to default route. Before returning, triggers event with
     * return value as well.
     *
     * @param raw - route path to match
     */
    route(src: string): RouteMatch | undefined;
    /**
     * Returns a formatted version of given {@link RouteMatch}, incl. any params.
     * Throw an error if an invalid route `id` is provided.
     *
     * @param match -
     * @param params -
     * @param hash - if true, prepends `#` to results
     */
    format(id: string, params?: any, hash?: boolean): string;
    format(match: Partial<RouteMatch>, hash?: boolean): string;
    routeForID(id: string): Route | undefined;
    protected matchRoute(curr: string[], route: Route): RouteMatch | undefined;
    protected validateRouteParams(params: any, validators: IObjectOf<Partial<RouteParamValidator>>): boolean;
    protected handleRouteFailure(): boolean;
}
//# sourceMappingURL=basic.d.ts.map