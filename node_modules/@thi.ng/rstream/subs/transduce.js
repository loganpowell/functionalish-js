import { isReduced } from "@thi.ng/transducers";
/**
 * Returns a promise which subscribes to given input and transforms
 * incoming values using given transducer `xform` and reducer `rfn`.
 *
 * @remarks
 * Once the input or the reducer is done, the promise will resolve with
 * the final reduced result (or fail with error).
 *
 * @example
 * ```ts
 * transduce(
 *   fromIterable(tx.range(10)),
 *   tx.map((x) => x * 10),
 *   tx.add()
 * ).then((x) => console.log("result", x))
 *
 * // result 450
 * ```
 *
 * @param src -
 * @param xform -
 * @param rfn -
 * @param init -
 */
export const transduce = (src, xform, rfn, init) => {
    let acc = init !== undefined ? init : rfn[0]();
    let sub;
    return new Promise((resolve, reject) => {
        sub = src.subscribe({
            next(x) {
                const _acc = rfn[2](acc, x);
                if (isReduced(_acc)) {
                    resolve(_acc.deref());
                }
                else {
                    acc = _acc;
                }
            },
            done() {
                resolve(acc);
            },
            error(e) {
                reject(e);
            }
        }, xform);
    }).then((fulfilled) => {
        sub.unsubscribe();
        return fulfilled;
    }, (rejected) => {
        sub.unsubscribe();
        throw rejected;
    });
};
