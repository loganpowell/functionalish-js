import { CommonOpts, ISubscribable } from "../api";
import { Subscription } from "../subscription";
import { ASidechain } from "./asidechain";
import type { Predicate } from "@thi.ng/api";
export interface SidechainPartitionOpts<T> extends CommonOpts {
    pred: Predicate<T>;
}
/**
 * Returns a {@link Subscription} which buffers values from `src` until
 * side chain fires, then emits buffer (unless empty) and repeats
 * process until either input is done.
 *
 * @remarks
 * By default, the values read from the side chain are ignored (i.e.
 * only their timing is used), however the `pred`icate option can be
 * used to only trigger for specific values / conditions.
 *
 * @example
 * ```t
 * // merge various event streams
 * events = merge([
 *     fromEvent(document,"mousemove"),
 *     fromEvent(document,"mousedown"),
 *     fromEvent(document,"mouseup")
 * ]);
 *
 * // queue event processing to only execute during the
 * // requestAnimationFrame cycle (RAF)
 * events.subscribe(sidechainPartition(fromRAF())).subscribe(trace())
 * ```
 *
 * @param side -
 * @param opts -
 */
export declare const sidechainPartition: <A, B>(side: ISubscribable<B>, opts?: Partial<SidechainPartitionOpts<B>> | undefined) => Subscription<A, A[]>;
export declare class SidechainPartition<T, S> extends ASidechain<T, S, T[]> {
    buf: T[];
    constructor(side: ISubscribable<S>, opts?: Partial<SidechainPartitionOpts<S>>);
    next(x: T): void;
}
//# sourceMappingURL=sidechain-partition.d.ts.map