import { getterT } from "./getter";
import { setterT } from "./setter";
/**
 * Similar to {@link setIn}, but applies given function to current path
 * value (incl. any additional/optional arguments passed to `updateIn`)
 * and uses result as new value. Does not modify original state (unless
 * given function does so itself).
 *
 * ```
 * add = (x, y) => x + y;
 * updateIn({ a: { b: { c: 23 } } }, "a.b.c", add, 10);
 * // { a: { b: { c: 33 } } }
 * ```
 *
 * @param state - state to update
 * @param path - update path
 * @param fn - update function
 * @param args - optional args for `fn`
 */
export const updateIn = (state, path, fn, ...args) => updateInT(state, path, fn, ...args);
export function updateInT(state, path, fn, ...args) {
    return setterT(path)(state, fn.apply(null, (args.unshift(getterT(path)(state)), args)));
}
