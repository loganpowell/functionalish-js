import { Stream } from "../stream";
import { optsWithID } from "../utils/idgen";
/**
 * Returns a {@link Stream} of monotonically increasing counter values,
 * emitted at given `delay` interval and up to the optionally defined
 * max value (default: âˆž), after which the stream is closed.
 *
 * @remarks
 * The stream only starts when the first subscriber becomes available.
 *
 * @param delay -
 * @param opts -
 */
export const fromInterval = (delay, opts) => {
    opts = optsWithID("interval", Object.assign({ num: Infinity }, opts));
    return new Stream((stream) => {
        let i = 0;
        let count = opts.num;
        stream.next(i++);
        let id = setInterval(() => {
            stream.next(i++);
            if (--count <= 0) {
                clearInterval(id);
                stream.closeIn !== 0 /* NEVER */ && stream.done();
            }
        }, delay);
        return () => clearInterval(id);
    }, opts);
};
