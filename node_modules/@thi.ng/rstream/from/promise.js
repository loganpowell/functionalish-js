import { Stream } from "../stream";
import { optsWithID } from "../utils/idgen";
/**
 * Yields a single-value {@link Stream} of the resolved promise and then
 * automatically marks itself done.
 *
 * @remarks
 * It doesn't matter if the promise resolves before the first subscriber
 * has attached.
 *
 * @param src -
 * @param opts -
 */
export const fromPromise = (src, opts) => {
    let canceled = false;
    let isError = false;
    let err = {};
    src.catch((e) => {
        err = e;
        isError = true;
    });
    return new Stream((stream) => {
        src.then((x) => {
            if (!canceled && stream.getState() < 2 /* DONE */) {
                if (isError) {
                    stream.error(err);
                    err = null;
                }
                else {
                    stream.next(x);
                    stream.closeIn !== 0 /* NEVER */ && stream.done();
                }
            }
        }, (e) => stream.error(e));
        return () => {
            canceled = true;
        };
    }, optsWithID("promise", opts));
};
